import aiomysql
import logging
import os

logger = logging.getLogger(__name__)

class DBClient:
    def __init__(self):
        """Initialize the MySQL connection pool."""
        self.pool = None

    async def connect(self):
        """Creates a connection pool to MySQL."""
        try:
            self.pool = await aiomysql.create_pool(
                host=os.getenv("DB_HOST", "localhost"),
                port=int(os.getenv("DB_PORT", 3306)),
                user=os.getenv("DB_USER", "root"),
                password=os.getenv("DB_PASSWORD", ""),
                db=os.getenv("DB_NAME", "iam_db"),
                minsize=1,
                maxsize=10,
                autocommit=True
            )
            logger.info("✅ MySQL connection pool established successfully.")
        except Exception as e:
            logger.error(f"❌ Failed to establish MySQL connection: {e}")
            raise

    async def close(self):
        """Closes the MySQL connection pool."""
        if self.pool:
            self.pool.close()
            await self.pool.wait_closed()
            logger.info("✅ MySQL connection pool closed.")

    async def execute_query(self, query, params=None, fetch_one=False, fetch_all=False):
        """Executes a SQL query with optional fetching."""
        try:
            async with self.pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cursor:
                    await cursor.execute(query, params or ())
                    if fetch_one:
                        return await cursor.fetchone()
                    if fetch_all:
                        return await cursor.fetchall()
                    return None
        except Exception as e:
            logger.error(f"❌ Database query failed: {e}")
            raise

# Create a global instance
db_client = DBClient()
