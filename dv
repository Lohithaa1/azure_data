import logging
import aiomysql
import uuid
from services.db_config import get_db_connection  # Import DB connection function

logger = logging.getLogger(__name__)

class DBOperations:
    def __init__(self):
        self.pool = None

    async def init_db(self):
        """üéØ Initialize the database connection pool."""
        try:
            self.pool = await get_db_connection()
            logger.info("‚úÖ Database connection pool initialized successfully.")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize database connection: {e}")
            raise

    async def get_service_id(self, service_name: str):
        """üîç Fetch service ID by name."""
        try:
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT service_id FROM mst_services WHERE name = %s", (service_name,))
                    result = await cursor.fetchone()
                    return result[0] if result else None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Failed to fetch service_id for {service_name}: {e}")
            return None

    async def insert_service(self, service_name: str):
        """üõ†Ô∏è Insert a new service and return its ID."""
        try:
            service_id = str(uuid.uuid4())  # Generate unique ID
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        "INSERT INTO mst_services (service_id, name, created_by, updated_by) VALUES (%s, %s, %s, %s)",
                        (service_id, service_name, "1", "1")
                    )
                    await conn.commit()
                    logger.info(f"‚úÖ Service '{service_name}' inserted successfully with ID: {service_id}")
                    return service_id
        except Exception as e:
            logger.error(f"‚ùå Failed to insert service {service_name}: {e}")
            return None

    async def get_resource_type_id_by_name(self, resource_name: str):
        """üîç Fetch resource type ID by name."""
        try:
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT resource_type_id FROM mst_resource_types WHERE name = %s", (resource_name,))
                    result = await cursor.fetchone()
                    return result[0] if result else None
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Failed to fetch resource_type_id for {resource_name}: {e}")
            return None

    async def insert_resource_type(self, resource_id: str, resource_name: str, service_id: str, parent_resource_id: str = None):
        """üõ†Ô∏è Insert resource type with optional parent mapping."""
        try:
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        """INSERT INTO mst_resource_types (resource_type_id, name, service_id, parent_resource_type_id, created_by, updated_by) 
                           VALUES (%s, %s, %s, %s, %s, %s)""",
                        (resource_id, resource_name, service_id, parent_resource_id, "1", "1")
                    )
                    await conn.commit()
                    logger.info(f"‚úÖ Resource type '{resource_name}' inserted successfully with ID: {resource_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to insert resource type {resource_name}: {e}")

    async def insert_role(self, role_name: str, resource_type_id: str):
        """üõ†Ô∏è Insert a role and return its ID."""
        try:
            role_id = str(uuid.uuid4())
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        "INSERT INTO mst_roles (role_id, name, scope_resource_type_id, created_by, updated_by) VALUES (%s, %s, %s, %s, %s)",
                        (role_id, role_name, resource_type_id, "1", "1")
                    )
                    await conn.commit()
                    logger.info(f"‚úÖ Role '{role_name}' inserted successfully with ID: {role_id}")
                    return role_id
        except Exception as e:
            logger.error(f"‚ùå Failed to insert role {role_name}: {e}")
            return None

    async def insert_permission(self, permission_name: str, resource_type_id: str):
        """üõ†Ô∏è Insert a permission and return its ID."""
        try:
            permission_id = str(uuid.uuid4())
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        "INSERT INTO mst_permissions (permission_id, name, resource_type_id, created_by, updated_by) VALUES (%s, %s, %s, %s, %s)",
                        (permission_id, permission_name, resource_type_id, "1", "1")
                    )
                    await conn.commit()
                    logger.info(f"‚úÖ Permission '{permission_name}' inserted successfully with ID: {permission_id}")
                    return permission_id
        except Exception as e:
            logger.error(f"‚ùå Failed to insert permission {permission_name}: {e}")
            return None

    async def insert_role_permission(self, role_id: str, permission_id: str):
        """üõ†Ô∏è Insert role-permission mapping."""
        try:
            role_permission_id = str(uuid.uuid4())
            async with self.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        "INSERT INTO mst_role_permissions (role_permission_id, role_id, permission_id, created_by, updated_by) VALUES (%s, %s, %s, %s, %s)",
                        (role_permission_id, role_id, permission_id, "1", "1")
                    )
                    await conn.commit()
                    logger.info(f"‚úÖ Role-Permission mapping inserted: Role {role_id} ‚Üí Permission {permission_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to insert role-permission mapping: {e}")

    async def generate_uid(self):
        """üîë Generate a unique ID (UUID) for primary keys."""
        return str(uuid.uuid4())

db_operations = DBOperations()


import os
import json
import logging
import asyncio
from services.json_handler import JSONHandler
from services.resource_manager import ResourceManager
from services.resource_type_id import ResourceClient
from services.db_operations import DBOperations  # Import DB operations

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """üöÄ Main function to orchestrate resource creation and database storage."""
    try:
        # Initialize all clients
        resource_manager = ResourceManager()
        json_handler = JSONHandler()
        resource_id_client = ResourceClient()
        db_operations = DBOperations()
        await db_operations.init_db()  # Initialize DB connection

        # Load the resource template JSON
        file_path = os.getenv("TEMPLATE_FILE")
        logger.info(f"üìÑ TEMPLATE_FILE path: {file_path}")

        try:
            with open(file_path, "r") as f:
                resource_data = json.load(f)
            logger.info("‚úÖ Resource template loaded successfully.")
        except Exception as e:
            logger.error(f"‚ùå Failed to load resource template: {str(e)}")
            raise

        # Generate a unique resource ID
        resource_id = await resource_id_client.get_resource_id()
        if not resource_id:
            logger.error("‚ùå Failed to generate resource ID.")
            return

        resource_data["key"] = resource_id

        # Create the resource in Permit.io
        resource_created = await resource_manager.create_resource_with_roles_relations(resource_id, resource_data)
        if not resource_created:
            logger.error(f"‚ùå Resource creation failed for {resource_id}")
            return

        resource_name = resource_created["name"]
        service_name = resource_data.get("service_name", None)
        parent_resource_name = None

        logger.info(f"‚úÖ Resource '{resource_name}' created successfully.")

        # üîç Get or Insert Service
        service_id = await db_operations.get_service_id(service_name)
        if not service_id:
            service_id = await db_operations.insert_service(service_name)

        # üîç Get Parent Resource ID if relation exists
        relations = resource_data.get("relations", {})
        if relations:
            for relation_key, relation_details in relations.items():
                if relation_key == "parent":
                    parent_resource_name = relation_details.get("subject_resource", None)
                    break

        parent_resource_id = None
        if parent_resource_name:
            parent_resource_id = await db_operations.get_resource_type_id_by_name(parent_resource_name)

        # üõ†Ô∏è Insert Resource Type in DB
        await db_operations.insert_resource_type(resource_id, resource_name, service_id, parent_resource_id)

        # üõ†Ô∏è Insert Roles into DB
        roles = resource_data.get("roles", {})
        for role_key, role_details in roles.items():
            role_id = await db_operations.insert_role(role_details.get("name", ""), resource_id)

            # üõ†Ô∏è Insert Role-Permission Mappings
            for permission in role_details.get("permissions", []):
                permission_id = await db_operations.insert_permission(permission, resource_id)
                await db_operations.insert_role_permission(role_id, permission_id)

        logger.info("‚úÖ Resource creation and database storage completed successfully.")

    except Exception as e:
        logger.error(f"‚ùå Error during the resource creation process: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
